---
description: Project maintenance and file management rules
globs: ["**/*"]
alwaysApply: true
---

# 项目维护规则

## 文件管理原则

### 1. 文件删除政策
- **所有文件删除操作必须在执行前得到用户确认**
- **除非绝对必要，否则避免删除文件**
- **当需要删除文件时，清楚地解释原因并获得用户的明确批准**
- **优先修改现有文件而不是删除和重新创建**

### 2. 文件创建原则
- **可以按需创建必要的文件**
- **优先考虑编辑现有文件，但可以创建新文件来满足需求**
- **避免主动创建不必要的文档文件，除非用户明确要求**

### 3. 代码清理
- **及时清理未使用的 import 语句**
- **删除未使用的变量和函数**
- **移除注释掉的代码**
- **保持代码整洁和可维护**

## 国际化维护

### 1. 翻译文件同步
- **新增任何翻译 key 时，必须在所有语言文件中同步添加**
- **每次新增 key 后，必须运行一致性检查**
- **保持多语言文件的 key 顺序一致**

### 2. 验证脚本
```bash
# 运行国际化一致性检查
node scripts/validate-i18n-line-order.js

# 或使用 pnpm 命令
pnpm i18n:check
```

### 3. 例外路径管理
当新增国际化例外路径时：
1. 更新 `middleware.ts` 中的 `matcher` 配置
2. 在相关规则文件中记录例外原因
3. 确保团队成员了解变更

## 依赖管理

### 1. 包管理
- **使用 pnpm 作为包管理器**
- **及时更新依赖版本**
- **定期检查安全漏洞**

### 2. 导入规范
```tsx
// ✅ 推荐：使用绝对路径导入
import { Button } from '@/components/ui/button';
import { useTranslations } from 'next-intl';

// ✅ 推荐：按类型分组导入
import React from 'react';
import { NextPage } from 'next';

import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

import { utils } from '@/lib/utils';
import { api } from '@/services/api';

// ❌ 避免：混乱的导入顺序
import { utils } from '@/lib/utils';
import React from 'react';
import { Button } from '@/components/ui/button';
```

## 版本控制

### 1. 提交规范
- **使用清晰的提交消息**
- **遵循约定式提交格式**
- **每次提交应该是一个逻辑单元**

### 2. 分支管理
- **功能开发使用 feature 分支**
- **及时合并和删除已完成的分支**
- **保持 main 分支稳定**

## 文档维护

### 1. 代码注释
- **为复杂逻辑添加注释**
- **使用 JSDoc 注释函数和类**
- **保持注释与代码同步**

### 2. 类型文档
```tsx
/**
 * 用户配置文件接口
 * @interface UserProfile
 */
interface UserProfile {
  /** 用户唯一标识符 */
  id: string;
  /** 用户显示名称 */
  name: string;
  /** 用户邮箱地址 */
  email: string;
  /** 用户头像 URL（可选） */
  avatar?: string;
  /** 账户是否激活 */
  isActive: boolean;
}
```

## 安全考虑

### 1. 环境变量
- **不要在代码中硬编码敏感信息**
- **使用 .env.local 存储本地配置**
- **确保生产环境变量正确配置**

### 2. 输入验证
- **验证用户输入**
- **防止 XSS 攻击**
- **使用类型安全的 API 调用**

## 监控和日志

### 1. 错误追踪
- **实现全局错误处理**
- **记录关键操作日志**
- **监控应用性能指标**

### 2. 用户体验
- **监控页面加载时间**
- **跟踪用户交互**
- **收集用户反馈**

## 检查清单

### 开发前
- [ ] 了解需求和设计规范
- [ ] 检查现有代码和组件
- [ ] 规划代码结构

### 开发中
- [ ] 遵循编码规范
- [ ] 实现国际化支持
- [ ] 使用类型安全的代码
- [ ] 清理未使用的代码

### 开发后
- [ ] 运行 linter 和类型检查
- [ ] 测试功能完整性
- [ ] 检查国际化一致性
- [ ] 更新相关文档

### 部署前
- [ ] 构建成功
- [ ] 所有测试通过
- [ ] 性能指标正常
- [ ] 安全检查完成